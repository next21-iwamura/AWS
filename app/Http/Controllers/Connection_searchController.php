<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Request as PostRequest;

class Connection_searchController extends Controller
//class Connection_test_searchController extends Controller
{


        /************************************************************************************************************************************************************************************************************* */
            // 定数管理用メソッド
        /************************************************************************************************************************************************************************************************************* */
                public function define(){

                    $define = array();

                    // 本番 or テスト用フォルダの切り替え変数
                        //$change = "_test";
                        //$change2 = "test_";
                        $change = "";
                        $change2 = "";
                    
                        $bladename = "parts.connection" . $change . "_search";
                        $folda_name = "";
                        $file_pass = "../storage/app/public/csv/op/connection" . $change . "/";
                        $file_pass2 = "public/csv/op/connection" . $change . "/";
                        $file_name = "first" . $change . ".csv";
                        $table_name = $change2 . "connections";
                        $table_name2 = $change2 . "connection_ids";
                        $table_name3 = $change2 . "connection_infos";
                        $table_name4 = $change2 . "connection_info2s";
                        $file_name2 = "get_id" . $change . ".csv";
                        $file_name3 = "kanren_syohin" . $change . ".csv";
                        
                        array_push($define,$bladename);
                        array_push($define,$folda_name);
                        array_push($define,$file_pass);
                        array_push($define,$file_pass2);
                        array_push($define,$file_name);
                        array_push($define,$table_name);
                        array_push($define,$table_name2);
                        array_push($define,$table_name3);
                        array_push($define,$table_name4);
                        array_push($define,$file_name2);
                        array_push($define,$file_name3);

                        return $define;

                }



        /************************************************************************************************************************************************************************************************************* */
            // 関連商品出力ページの表示
        /************************************************************************************************************************************************************************************************************* */
                public function Connection_search_view(Request $request){
                    
                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）start
                    /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }

                                    $def_i++;
                                }
                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）end
                    /************************************************************************************************************************************************************************************************************* */
                    
                    // ページ表示時にフォルダ内のCSVを全削除（過去のファイルを参照する事故を防ぐ為かく、確実に現在アップしているものを扱うようにする）
                        $success = \File::cleanDirectory($file_pass);

                    // ページ表示時にテーブルの情報を削除
                        //\DB::table($table_name)->Delete();
                        \DB::table($table_name)->truncate();
                        \DB::table($table_name2)->truncate();
                        \DB::table($table_name3)->truncate();
                        \DB::table($table_name4)->truncate();

                    return view($bladename);
                    
                }

        /************************************************************************************************************************************************************************************************************* */
            // 押下されたボタン毎に処理（メソッド）を切り分け
        /************************************************************************************************************************************************************************************************************* */
                public function btn_select(Request $request){

                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）start
                    /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }
                                    if($def_i == 10){ $file_name3 = $def; }

                                    $def_i++;
                                }
                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）end
                    /************************************************************************************************************************************************************************************************************* */
                    

                    if (PostRequest::get('csvup')) {
                        // アップロード用メソッドの実行
                            return $this->file_up($request);
                    } else if (PostRequest::get('db_insert')) {
                        // CSVデータをデータベースへ登録用メソッドの実行
                            return $this->db_insert($request);
                    } else if(PostRequest::get('search')){
                        // 各行毎の関連商品検索用メソッドの実行
                            return $this->connection_search($request);
                    } else if(PostRequest::get('create_info')){
                        // 第一条件の関連IDを取得用メソッドの実行
                            return $this->create_info($request);
                    } else if(PostRequest::get('create_info2')){
                        // 第一条件で取得した関連IDデータを保存用メソッドの実行
                            return $this->create_info2($request);
                    } else if(PostRequest::get('create_csv')){
                        // CSV作成用メソッドの実行
                            return $this->create_csv($request);

                    } else if(PostRequest::get('dl')){

                        $file_pass = $file_pass . $file_name3;

                        return response()->download($file_pass);

                    }
                }


        /************************************************************************************************************************************************************************************************************* */
            // CSVのアップロード START
        /************************************************************************************************************************************************************************************************************* */
                public function file_up(Request $request){

                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）start
                    /************************************************************************************************************************************************************************************************************* */

                        $define = $this->define();
                        $def_i = 0;
                        // 各変数にパスやファイル名を代入
                            foreach($define as $def){
                                if($def_i == 0){ $bladename = $def; }
                                if($def_i == 1){ $folda_name = $def; }
                                if($def_i == 2){ $file_pass = $def; }
                                if($def_i == 3){ $file_pass2 = $def; }
                                if($def_i == 4){ $file_name = $def; }
                                if($def_i == 5){ $table_name = $def; }
                                if($def_i == 10){ $file_name3 = $def; }

                                $def_i++;
                            }
                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）end
                    /************************************************************************************************************************************************************************************************************* */

                                $comment = "";
                                $error_comment = "";
                            // ファイルのアップロード
                                if ($request->file('loadFileName')) {
                                    $request->file('loadFileName')->storeAs($file_pass2,$file_name);
                                    //$up_comment .= "<p>[ " . $file_name . " ] ファイルをアップロードしました！</p>";
                                    $comment = "<p>！！　ファイルのアップロード終了　！！</p>";
                                }
                            // フラグ作成
                                $db_insert = "ON";

                            // 元の画面を表示
                                return view($bladename,['db_insert'=>$db_insert,'comment'=>$comment,'error_comment'=>$error_comment]);

                }

        /************************************************************************************************************************************************************************************************************* */
            // CSVのアップロード END
        /************************************************************************************************************************************************************************************************************* */

        /************************************************************************************************************************************************************************************************************* */
            // CSVデータをデータベースへ登録用 START
        /************************************************************************************************************************************************************************************************************* */
                public function db_insert(Request $request){

                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）start
                    /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 10){ $file_name3 = $def; }

                                    $def_i++;
                                }
                    /************************************************************************************************************************************************************************************************************* */
                        // 定数管理用（メソッドの呼び出し）end
                    /************************************************************************************************************************************************************************************************************* */
                    /************************************************************************************************************************************************************************************************************* */
                        // アップロードしたCSVを開いて中身をDBへ登録　start
                    /************************************************************************************************************************************************************************************************************* */

                            $error_comment = "";

                            if (\File::exists($file_pass . $file_name)) {

                                                                            
                                        // ファイルの読み込み
                                            $file = new \SplFileObject(storage_path($file_pass . $file_name));
                                            
                                            $file->setFlags(
                                            \SplFileObject::READ_CSV |           // CSV 列として行を読み込む
                                            \SplFileObject::READ_AHEAD |       // 先読み/巻き戻しで読み出す。
                                            \SplFileObject::SKIP_EMPTY |         // 空行は読み飛ばす
                                            \SplFileObject::DROP_NEW_LINE    // 行末の改行を読み飛ばす
                                            );
                                        
                                        // エスケープ処理
                                            $file->setCsvControl(",", '"', "\"");

                                        // 読み込んだCSVデータをループ
                                            $i = 0;
                                            $stack = array();
                                            $exsit_id_array = array();
                                            $params = array();
                                            foreach ($file as $line) {

                                                $ii = 0;
                                                foreach ($line as $line2[$ii]) {
                                                    
                                                    mb_convert_variables('sjis-win', 'UTF-8', $line2[$ii]);

                                                   // if($ii == 6 && $i <> 0){
                                                    //if($ii == 7 && $i <> 0){
                                                    if($ii == 8 && $i <> 0){
                                                        // bulk insert（行毎にDBへアクセスするとタイムアウトしてしまうので、一旦配列へ代入し、ある程度たまったタイミングでまとめてDBへ登録する）
                                                            //$connections = \DB::table('connections')->insert([
                                                            // 値が空の場合に本番インサート時にエラーとなる為の対応（DBではNULL許容の設定）
                                                                if($line2[7] == ""){
                                                                    $line2[7] = null;
                                                                }

                                                            $params[] = [ 
                                                                'item_id' => $line2[0],
                                                                'site' => $line2[1],
                                                                'kinds' => $line2[2],
                                                                'class' => $line2[3],
                                                                'brand' => $line2[4],
                                                                'category_code' => $line2[5],
                                                                'ref' => $line2[6],
                                                                'arrival' => $line2[7],
                                                                'status' => $line2[8],
                                                                'created_at' => now(),
                                                                'updated_at' => now()
                                                            ];
                                                            //]);
                                                        }

                                                    $ii++;
                                                    }
                                                // bulk insert（配列が2200件たまる毎にまとめてDBへ登録）
                                                    // データ量が多いとDBに弾かれるので一度の処理数を多くする事で調整
                                                    //if (count($params) >= 1000) {
                                                    if (count($params) >= 2200) {
                                                        \DB::table($table_name)->insert($params);
                                                        $params = [];
                                                    }

                                                //mb_convert_variables('sjis-win', 'UTF-8', $line);
                                                                    
                                            $i++;
                                            }
                                            // 残り2200件を切った行を最後にデータベースへ登録
                                                if (isset($params)) {
                                                    \DB::table($table_name)->insert($params);
                                                    $params = [];
                                                }

                            } else { 
                                //$error_comment .= "<p>" . $need_file_name1 . "ファイルがアップされていません！"; 
                                $need_file_error1 = "ON";
                            }


                            // ファイルがアップされていない状態でフォーム表示ボタン押下時のエラー
                                $Empty = (count(glob("../storage/app/public/csv/op/connection/*")) === 0) ? 'Empty' : 'Not empty';

                                if ($Empty=="Empty"){
                                    echo "<p style='width:100%; height:100%;display: flex;align-items: center;justify-content: center;'><span style='height:2em; text-align:center;'>ファイルが一つもアップされていません！<br><a href=''>戻る</a></span></p>";
                                    exit;
                                } else {
                                    if($error_comment <> ""){
                                        echo "<p style='width:100%; height:100%;display: flex;align-items: center;justify-content: center;'><span style='height:2em; text-align:center;'>" . $error_comment . "<br><a href=''>戻る</a></span></p>";
                                        exit;
                                    }

                                }

                    /************************************************************************************************************************************************************************************************************* */
                        // アップロードしたCSVを開いて中身をDBへ登録　end
                    /************************************************************************************************************************************************************************************************************* */
                    
                    // フラグの作成
                        $search = "ON";
                        $comment = "<p>！！　DB登録終了　！！</p>";
                        $error_comment = "";

                    // 元の画面を表示
                        return view($bladename,['error_comment'=>$error_comment,'search'=>$search,'comment'=>$comment]);
                }

        /************************************************************************************************************************************************************************************************************* */
            // CSVデータをデータベースへ登録用 END
        /************************************************************************************************************************************************************************************************************* */



        /************************************************************************************************************************************************************************************************************* */
            // 各行毎の関連商品検索 START
        /************************************************************************************************************************************************************************************************************* */

                public function connection_search(Request $request){
                    
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）start
                        /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }
                                    
                                    $def_i++;
                                }
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）end
                        /************************************************************************************************************************************************************************************************************* */


                        /************************************************************************************************************************************************************** */
                        // 全商品から取得条件の全パターンを配列へ代入する（第一条件用）
                        /************************************************************************************************************************************************************** */

                                // 全データ取得
                                        $Connections = \DB::table($table_name) 
                                        ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.category_code',$table_name . '.brand',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                        ->get();

                                // クエリビルダを実行
                                        $i = 0;
                                        $params = array();
                                        $all_array = array();
                                        foreach ($Connections as $connections) {
                                            $p_array = array();
                                            $id = $connections->id;
                                            $item_id = $connections->item_id;
                                            $site = $connections->site;
                                            $kinds = $connections->kinds;
                                            $class = $connections->class;
                                            $brand = $connections->brand;
                                            $category_code = $connections->category_code;
                                            $ref = $connections->ref;
                                            $arrival = $connections->arrival;
                                            $status = $connections->status;

                                            // 行毎の配列に比較対象項目をセット（第一条件：カテゴリコードが一致）
                                                array_push($p_array,$site);
                                                array_push($p_array,$class);
                                                array_push($p_array,$category_code);
                                                array_push($p_array,$kinds);
                                                //array_push($p_array,$status);
                                                //array_push($p_array,$brand);
                                                //array_push($p_array,$ref);

                                            // 全体配列へ行毎の配列を代入（存在しないパターンのみ）
                                                if(in_array( $p_array, $all_array)){
                                                } else {
                                                    $p_text = "";
                                                    array_push($all_array,$p_array);
                                                    foreach($p_array as $p_array2){
                                                        $p_text .= $p_array2 . ",";
                                                    }
                                                    $p_text = trim($p_text,",");

                                                    $params[] = [ 
                                                        'patern' => $p_text,
                                                        'created_at' => now(),
                                                        'updated_at' => now()
                                                    ];

                                                        
                                                }

                                            // bulk insert（配列が1000件たまる毎にまとめてDBへ登録）
                                                if (count($params) >= 1000) {
                                                    \DB::table($table_name3)->insert($params);
                                                    $params = [];
                                                }

                                        $i++;
                                        }


                                    // 残り1000件を切った行を最後にデータベースへ登録
                                        if (isset($params)) {
                                            \DB::table($table_name3)->insert($params);
                                            $params = [];
                                        }
                                    // フラグの作成
                                        $create_info = "ON";
                                        $comment = "<p>！！　情報処理1終了　！！</p>";
                                        $error_comment = "";
                                    // 元の画面を表示
                                        return view($bladename,['create_info'=>$create_info,'error_comment'=>$error_comment,'comment'=>$comment]);
                                            

                }


        /************************************************************************************************************************************************************************************************************* */
            // 各行毎の関連商品検索 END
        /************************************************************************************************************************************************************************************************************* */



        /************************************************************************************************************************************************************************************************************* */
            // 第一条件の関連IDを取得 START
        /************************************************************************************************************************************************************************************************************* */

                public function create_info(Request $request){

        
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）start
                        /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }
                                    
                                    $def_i++;
                                }
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）end
                        /************************************************************************************************************************************************************************************************************* */
    
    
                    
                        /************************************************************************************************************************************************************** */
                        // 取得条件のパターン毎にマッチする商品IDを取得（第一条件用）
                        /************************************************************************************************************************************************************** */
                            
                            // 第一条件に対する全パターンデータ取得
                                $Connections3 = \DB::table($table_name3) 
                                ->select($table_name3 . '.id',$table_name3 . '.patern')
                                ->get();
                            // クエリビルダ
                                $i = 0;   
                                $all_array = array();  
                                foreach ($Connections3 as $connections3) {
                                    $id = $connections3->id;
                                    $patern = $connections3->patern;
        
                                    $p_array = explode(",",$patern);
                                    array_push($all_array,$p_array);
        
                                $i++;
                                }
    
                        /************************************************************************************************************************************************************** */
                        // 第一条件用・関連ID取得
                        /************************************************************************************************************************************************************** */
       
                                // 全体配列に代入された各配列のパターンと一致するIDをDBから取得し、ID格納用配列へ11個代入
                                    $i = 0;
                                    $all_id_array = array();
                                    $params = array();
    
                                    // パターン格納配列起動（第一条件用）
                                        foreach ($all_array as $p_array) {
                                                $ii = 0;
                                                foreach ($p_array as $array) {
                                                    if($ii == 0){$site = $array;}
                                                    if($ii == 1){$class = $array;}
                                                    if($ii == 2){$category_code = $array;}
                                                    if($ii == 3){$kinds = $array;}
                                                    //if($ii == 4){$status = $array;}
                                                    //if($ii == 4){$ref = $array;}
        
                                                $ii++;
                                                }
                                                $p_id_array = array();
                                                if($class == 0 || $class == 1){
                                                    $Connections_select = \DB::table($table_name) 
                                                    ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.brand',$table_name . '.category_code',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                                    /*->where(function ($query){
                                                            return $query->where('class',1)->orWhere('class',2);
                                                    })*/
                                                    ->where('class',1)
                                                    ->where('site',$site)
                                                    ->where('category_code',$category_code)
                                                    ->where('kinds',$kinds)
                                                    ->where('status',0)
                                                    //->where('ref',$ref)
                                                    //->where('item_id','<>',$item_id)
                                                    ->limit(31)
                                                    ->orderBy('arrival', 'desc')
                                                    // 新品：class:0 中古：class:1 アンティーク：class:2
                                                    // 中古 → アンティーク → 新品順になるよう指定
                                                    /*->orderByRaw("CASE
                                                    WHEN class = '1' THEN 1
                                                    WHEN class = '2' THEN 2
                                                    END") */                                           
                                                    ->get();
        
                                                    // クエリビルダを実行
                                                        $i2 = 0;
                                                        foreach ($Connections_select as $connections_select) {
                                                            // 取得条件のパターン毎にマッチする商品IDをセット
                                                                $item_id = $connections_select->item_id;
                                                                array_push($p_id_array,$item_id);
        
                                                            $i2++;
                                                        }   
                                                        $p_text = "";
                                                        foreach($p_id_array as $p_array2){
                                                            $p_text .= $p_array2 . ",";
                                                        }
                                                        $p_text = trim($p_text,",");

                                                        $params[] = [ 
                                                            'match_id' => $p_text,
                                                            'created_at' => now(),
                                                            'updated_at' => now()
                                                        ];

                                
                                                } else if($class == 2){
                                                    $Connections_select = \DB::table($table_name) 
                                                    ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.brand',$table_name . '.category_code',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                                    /*->where(function ($query){
                                                            return $query->where('class',2)->orWhere('class',1);
                                                    })*/
                                                    ->where('class',2)
                                                    ->where('site',$site)
                                                    ->where('category_code',$category_code)
                                                    ->where('kinds',$kinds)
                                                    ->where('status',0)
                                                    //->where('ref',$ref)
                                                    //->where('item_id','<>',$item_id)
                                                    ->limit(31)
                                                    //->orderBy('arrival', 'desc')->orderBy('class', 'desc')
                                                    ->orderBy('arrival', 'desc')
                                                    ->get();
        
                                                    // クエリビルダを実行
                                                        $i2 = 0;
                                                        foreach ($Connections_select as $connections_select) {
                                                            // 取得条件のパターン毎にマッチする商品IDをセット
                                                                $item_id = $connections_select->item_id;
                                                                array_push($p_id_array,$item_id);
        
                                                            $i2++;
                                                        }     
                                                        $p_text = "";
                                                        foreach($p_id_array as $p_array2){
                                                            $p_text .= $p_array2 . ",";
                                                        }
                                                        $p_text = trim($p_text,",");

                                                        $params[] = [ 
                                                            'match_id' => $p_text,
                                                            'created_at' => now(),
                                                            'updated_at' => now()
                                                        ];
                                
                                                }
        
                                                // 取得条件のパターン毎に取得したIDを格納した配列を全体配列へセット
                                                    array_push($all_id_array,$p_id_array);
        
                                                // bulk insert（配列が1000件たまる毎にまとめてDBへ登録）
                                                    if (count($params) >= 1000) {
                                                        \DB::table($table_name4)->insert($params);
                                                        $params = [];
                                                    }
    
       
                                            $i++;
                                        }
    
                                    // 残り1000件を切った行を最後にデータベースへ登録
                                        if (isset($params)) {
                                            \DB::table($table_name4)->insert($params);
                                            $params = [];
                                        }
                                    // フラグの作成
                                        $create_info2 = "ON";
                                        $comment = "<p>！！　情報処理2終了　！！</p>";
                                        $error_comment = "";
                                    // 元の画面を表示
                                        return view($bladename,['create_info2'=>$create_info2,'error_comment'=>$error_comment,'comment'=>$comment]);
                }
                    
                    
        /************************************************************************************************************************************************************************************************************* */
            // 第一条件の関連IDを取得 END
        /************************************************************************************************************************************************************************************************************* */



        /************************************************************************************************************************************************************************************************************* */
            // 第一条件で取得した関連IDデータを保存（第二条件作成時に渡す） START
        /************************************************************************************************************************************************************************************************************* */

                public function create_info2(Request $request){

                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）start
                        /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 9){ $file_name2 = $def; }
                                    
                                    $def_i++;
                                }
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）end
                        /************************************************************************************************************************************************************************************************************* */
                    

                        $file_pass = $file_pass . $file_name2;

                        // 前回のCSVを使用しないように先にCSVを削除
                            if(file_exists($file_pass)){ unlink($file_pass); }
                        // CSVの作成
                            $csv_file_path = storage_path($file_pass);
                        // CSVを開く
                            $res = fopen($csv_file_path, 'a');

                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）start
                        /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }
                                    
                                    $def_i++;
                                }
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）end
                        /************************************************************************************************************************************************************************************************************* */
                
               
                        /************************************************************************************************************************************************************** */
                        // 取得条件のパターンを取得（第一条件用）
                        /************************************************************************************************************************************************************** */
                            
                                // 第一条件に対する全パターンデータ取得
                                    $Connections3 = \DB::table($table_name3) 
                                    ->select($table_name3 . '.id',$table_name3 . '.patern')
                                    ->get();
                                
                                
                                // クエリビルダ
                                    $i = 0;   
                                    $all_array = array();  
                                    foreach ($Connections3 as $connections3) {
                                        $id = $connections3->id;
                                        $patern = $connections3->patern;

                                        $p_array = explode(",",$patern);
                                        array_push($all_array,$p_array);

                                        $i++;
                                    }
                
                        /************************************************************************************************************************************************************** */
                        // 取得条件のパターン毎にマッチする商品IDを取得（第一条件用）
                        /************************************************************************************************************************************************************** */

                                // 第一条件に対する全関連IDデータ取得
                                    $Connections4 = \DB::table($table_name4) 
                                    ->select($table_name4 . '.id',$table_name4 . '.match_id')
                                    ->get();
                    

                                // クエリビルダ
                                    $i = 0;   
                                    $all_id_array = array();  
                                    foreach ($Connections4 as $connections4) {
                                        $id = $connections4->id;
                                        $match_id = $connections4->match_id;

                                        $p_array = explode(",",$match_id);
                                        array_push($all_id_array,$p_array);

                                    $i++;
                                    }


                            /************************************************************************************************************************************************************** */
                            // 全IDに対し、取得条件のパターン用配列を参照し、当IDが何番目の条件パターンと一致するのかを確認（第一条件用）
                            /************************************************************************************************************************************************************** */

                                    // 全データ取得
                                        $Connections = \DB::table($table_name) 
                                        ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.category_code',$table_name . '.brand',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                        ->get();

                                    // クエリビルダ
                                        $i = 0;
                                        $get_id_array = array();
                                        $all_get_id_array = array();
                                        $number = "";
                                        // 全IDを開く
                                            foreach ($Connections as $connections) {
                                                    $p_array = array();
                                                    $id = $connections->id;
                                                    $item_id = $connections->item_id;
                                                    $site = $connections->site;
                                                    $kinds = $connections->kinds;
                                                    $class = $connections->class;
                                                    $category_code = $connections->category_code;
                                                    $ref = $connections->ref;
                                                    $arrival = $connections->arrival;
                                                    // 第一条件のパターンを開く
                                                            $ii = 0;
                                                            foreach ($all_array as $p_array) {
                                                                $match1 = "";
                                                                $match2 = "";
                                                                $match3 = "";
                                                                $match4 = "";
                            
                                                                $iii = 0;
                                                                // パターン毎の配列に格納された条件を一つ一つ開く
                                                                    foreach ($p_array as $array) {

                                                                        // 格納された全ての条件が一致する事で、自身のパターンが分かるので、何番目の条件だったかを変数に代入
                                                                            if($iii == 0 && $array == $site){$match1 = "ON";}
                                                                            if($iii == 1 && $array == $class){$match2 = "ON";}
                                                                            if($iii == 2 && $array == $category_code){$match3 = "ON";}
                                                                            if($iii == 3 && $array == $kinds){$match4 = "ON";}

                                                                            if($iii == 3 && $match1 == "ON" && $match2 == "ON" && $match3 == "ON" && $match4 == "ON"){
                                                                                // マッチした条件パターンのナンバー
                                                                                    $number = $ii;
                                                                            }


                                                                        $iii++;
                                                                    }
                                                                    $ii++;

                                                            }
                                                

                                                /************************************************************************************************************************************************************** */
                                                // 自身の関連IDを取得（第一条件用）
                                                /************************************************************************************************************************************************************** */

                                                        $ii2 = 0;
                                                        $connect_id = "";
                                                        $connect_id_csv = array();
                                                        // パターン毎の関連IDが格納された配列を開く
                                                            foreach($all_id_array as $all_id_array2){
                                                                // 関連IDの配列順が自身のパターンのナンバーと一致した場合に中身の関連IDを自身へ紐付け（関連IDとパターン配列は同じ順番で紐ついている為、この方法で取得できる）
                                                                    if($ii2 == $number){

                                                                        foreach($all_id_array2 as $all_id_array3){
                                                                            // 関連商品のIDが本商品IDと一致してない場合は関連商品から除外
                                                                                if($item_id <> $all_id_array3){
                                                                                    $connect_id .= $all_id_array3 . ",";
                                                                                }
                                                                        }
                                                                    
                                                                    }

                                                                $ii2++;
                                                            }
                                                            $connect_id = trim($connect_id, ",");
                                                            array_push($connect_id_csv,$item_id);
                                                            array_push($connect_id_csv,$connect_id);

                                                /************************************************************************************************************************************************************** */
                                                // 取得したID毎の関連ID情報を一旦DBへ登録（第二条件の参照元とするため）
                                                /************************************************************************************************************************************************************** */

                                                // CSVにデータ代入
                                                    fputcsv($res,$connect_id_csv);

                                            $i++;
                                            }

                
                                    // CSVファイルを閉じる
                                        fclose($res);

                                    // フラグの設定
                                        $create_csv = "ON";
                                        $comment = "<p>！！　情報処理3終了　！！</p>";
                                        $error_comment = "";
                                    // 元の画面を表示
                                        return view($bladename,['create_csv'=>$create_csv,'error_comment'=>$error_comment,'comment'=>$comment]);
                
                            }


        /************************************************************************************************************************************************************************************************************* */
            // 第一条件で取得した関連IDデータを保存（第二条件作成時に渡す） END
        /************************************************************************************************************************************************************************************************************* */




        /************************************************************************************************************************************************************************************************************* */
            // CSV作成 START
        /************************************************************************************************************************************************************************************************************* */

                public function create_csv(Request $request){
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）start
                        /************************************************************************************************************************************************************************************************************* */
                            $define = $this->define();
                            $def_i = 0;
                            // 各変数にパスやファイル名を代入
                                foreach($define as $def){
                                    if($def_i == 0){ $bladename = $def; }
                                    if($def_i == 1){ $folda_name = $def; }
                                    if($def_i == 2){ $file_pass = $def; }
                                    if($def_i == 3){ $file_pass2 = $def; }
                                    if($def_i == 4){ $file_name = $def; }
                                    if($def_i == 5){ $table_name = $def; }
                                    if($def_i == 6){ $table_name2 = $def; }
                                    if($def_i == 7){ $table_name3 = $def; }
                                    if($def_i == 8){ $table_name4 = $def; }
                                    if($def_i == 9){ $file_name2 = $def; }
                                    if($def_i == 10){ $file_name3 = $def; }
                                    
                                    $def_i++;
                                }
                        /************************************************************************************************************************************************************************************************************* */
                            // 定数管理用（メソッドの呼び出し）end
                        /************************************************************************************************************************************************************************************************************* */
            

                        // ****************************************************************************************************************************************************************************************************
                        // 第一条件用CSVから情報を取得
                        // ****************************************************************************************************************************************************************************************************
                                    // ファイル名
                                        $read_file_name = $file_pass . $file_name2;

                                    // ファイルの読み込み
                                        $read_csv = new \SplFileObject(storage_path($read_file_name));
                                    
                                        $read_csv->setFlags(
                                            \SplFileObject::READ_CSV |           // CSV 列として行を読み込む
                                            \SplFileObject::READ_AHEAD |       // 先読み/巻き戻しで読み出す。
                                            \SplFileObject::SKIP_EMPTY |         // 空行は読み飛ばす
                                            \SplFileObject::DROP_NEW_LINE    // 行末の改行を読み飛ばす
                                        );
                                    
                                    // エスケープ処理
                                        $read_csv->setCsvControl(",", '"', "\"");
                    
                                    // 読み込んだCSVデータをループ
                                        $i = 0;
                                        ${"ids_" .$i} = "";
                                        $ids = "";
                                        $no_id_array = array();
                                        foreach ($read_csv as $var) {

                                            $ii = 0;
                                            foreach($var as $var2){
                                                if($ii == 0){$item_id = $var2;}
                                                if($ii == 1){$ids = $var2;}
            
                                                if($ids == ""){
                                                    array_push($no_id_array,$item_id);
                                                }
                                                // 第一条件の関連IDを変数へ格納
                                                    ${"ids_" .$i} = $ids;

                                                $ii++;
                                            }
                                            $i++;
                                        }

                        /************************************************************************************************************************************************************** */
                        // 第一条件で関連商品を一つも取得できなかったIDに対する第二条件用
                        /************************************************************************************************************************************************************** */
                                        


                        /************************************************************************************************************************************************************** */
                        // 全商品から取得条件の全パターンを配列へ代入する（第二条件用）
                        /************************************************************************************************************************************************************** */
                            
                            // 全データ取得
                                $Connections = \DB::table($table_name) 
                                ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.category_code',$table_name . '.brand',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                ->get();
                    
                            // クエリビルダを実行
                            // 第一条件で、関連IDを一つも取得できなかったIDのみが対象
                                $i = 0;
                                $all_no_array = array();
                                foreach ($Connections as $connections) {
                                    $p_array = array();
                                    $id = $connections->id;
                                    $item_id = $connections->item_id;
                                    $site = $connections->site;
                                    $kinds = $connections->kinds;
                                    $class = $connections->class;
                                    $brand = $connections->brand;
                                    $category_code = $connections->category_code;
                                    $ref = $connections->ref;
                                    $arrival = $connections->arrival;
                                    $status = $connections->status;

                                    // 関連IDを保有しないIDのみ実行
                                        if(in_array($item_id, $no_id_array)){

                                            // 行毎の配列に比較対象項目をセット（第二条件：ブランド名が一致）
                                                array_push($p_array,$site);
                                                array_push($p_array,$class);
                                                //array_push($p_array,$category_code);
                                                array_push($p_array,$brand);
                                                array_push($p_array,$kinds);
                                                //array_push($p_array,$status);
                                                //array_push($p_array,$ref);

                                            // 全体配列へ行毎の配列を代入（存在しないパターンのみ）
                                                if(in_array( $p_array, $all_no_array)){
                                                } else {
                                                    array_push($all_no_array,$p_array);
                                                }

                                        }


                                $i++;
                                }

                        /************************************************************************************************************************************************************** */
                        // 取得条件のパターン毎にマッチする商品IDを取得（第二条件用）
                        /************************************************************************************************************************************************************** */

                                // 全体配列に代入された各配列のパターンと一致するIDをDBから取得し、ID格納用配列へ11個代入
                                        $i = 0;
                                        $all_no_id_array = array();
                                        // パターン格納配列起動
                                            foreach ($all_no_array as $p_array) {
                                                $ii = 0;
                                                foreach ($p_array as $array) {
                                                    if($ii == 0){$site = $array;}
                                                    if($ii == 1){$class = $array;}
                                                    //if($ii == 2){$category_code = $array;}
                                                    if($ii == 2){$brand = $array;}
                                                    if($ii == 3){$kinds = $array;}
                                                    //if($ii == 4){$status = $array;}
                                                    //if($ii == 4){$ref = $array;}

                                                $ii++;
                                                }
                                                $p_id_array = array();
                                                if($class == 0 || $class == 1){
                                                    $Connections_select = \DB::table($table_name) 
                                                    ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.brand',$table_name . '.category_code',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                                    /*->where(function ($query){
                                                            return $query->where('class',1)->orWhere('class',2);
                                                    })*/
                                                    ->where('class',1)
                                                    ->where('site',$site)
                                                    //->where('category_code',$category_code)
                                                    ->where('brand',$brand)
                                                    ->where('kinds',$kinds)
                                                    ->where('status',0)
                                                    //->where('ref',$ref)
                                                    ->limit(31)
                                                    ->orderBy('arrival', 'desc')
                                                    // 新品：class:0 中古：class:1 アンティーク：class:2
                                                    // 中古 → アンティーク → 新品順になるよう指定
                                                    /*->orderByRaw("CASE
                                                    WHEN class = '1' THEN 1
                                                    WHEN class = '2' THEN 2
                                                    END") */   
                                                    ->get();

                                                    // クエリビルダを実行
                                                        $i2 = 0;
                                                        foreach ($Connections_select as $connections_select) {
                                                            // 取得条件のパターン毎にマッチする商品IDをセット
                                                                $item_id = $connections_select->item_id;
                                                                array_push($p_id_array,$item_id);
                                                            $i2++;
                                                        }
                                                } else if($class == 2){
                                                    $Connections_select = \DB::table($table_name) 
                                                    ->select($table_name . '.id',$table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.brand',$table_name . '.category_code',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status',$table_name . '.del')
                                                    /*->where(function ($query){
                                                            return $query->where('class',2)->orWhere('class',1);
                                                    })*/
                                                    ->where('class',2)
                                                    ->where('site',$site)
                                                    //->where('category_code',$category_code)
                                                    ->where('brand',$brand)
                                                    ->where('kinds',$kinds)
                                                    ->where('status',0)
                                                    //->where('ref',$ref)
                                                    ->limit(31)
                                                    //->orderBy('arrival', 'desc')->orderBy('class', 'desc')
                                                    ->orderBy('arrival', 'desc')
                                                    ->get();

                                                    // クエリビルダを実行
                                                        $i2 = 0;
                                                        foreach ($Connections_select as $connections_select) {
                                                            // 取得条件のパターン毎にマッチする商品IDをセット
                                                                $item_id = $connections_select->item_id;
                                                                array_push($p_id_array,$item_id);
                                                            $i2++;
                                                        }     
                                
                                                }

                                                // 取得条件のパターン毎に取得したIDを格納した配列を全体配列へセット
                                                    array_push($all_no_id_array,$p_id_array);


                                                $i++;
                                            }


                        /************************************************************************************************************************************************************** */
                        // 取得し終わった全データ用配列をCSVへ書き出し
                        /************************************************************************************************************************************************************** */

                                    $file_pass = $file_pass . $file_name3;

                                    // 前回のCSVを使用しないように先にCSVを削除
                                        if(file_exists($file_pass)){ unlink($file_pass); }
                                    
                                    // CSVの作成
                                        $csv_file_path = storage_path($file_pass);

                                    // CSVを開く
                                        $res = fopen($csv_file_path, 'a');

                                    // 最初にタイトルのみ配列へ代入
                                        $title = array("商品コード","関連商品グループ","関連商品","並び順");
                                        mb_convert_variables('sjis-win', 'UTF-8', $title);
                                    // CSVにタイトル追加
                                        fputcsv($res,$title);
    
                        /************************************************************************************************************************************************************** */
                        // DBから関連IDが一つもないIDを取得し、関連IDを保有しないIDを対象とした第二条件にて取得した関連商品IDの配列を参照して関連IDを付与する
                        /************************************************************************************************************************************************************** */
                                
        
                                // 第一条件で取得した関連IDデータ取得
                                    $Connections_select3 = \DB::table($table_name) 
                                    ->select($table_name . '.item_id',$table_name . '.site',$table_name . '.kinds',$table_name . '.class',$table_name . '.brand',$table_name . '.category_code',$table_name . '.ref',$table_name . '.arrival',$table_name . '.status')
                                    ->get();

                                // クエリビルダを実行
                                    $i = 0;
                                    foreach ($Connections_select3 as $connections_select3) {
                                            $item_id = $connections_select3->item_id;
                                            $ids = ${"ids_" .$i};
                                            $site = $connections_select3->site;
                                            $class = $connections_select3->class;
                                            $brand = $connections_select3->brand;
                                            $kinds = $connections_select3->kinds;

                                        // 第二条件のパターンを開く
                                            $ii = 0;
                                            $number = "";
                                            foreach ($all_no_array as $p_no_array) {
                                                $match1 = "";
                                                $match2 = "";
                                                $match3 = "";
                                                $match4 = "";
                                                //$match5 = "";
            
                                                $iii = 0;
                                                // パターン毎の配列に格納された条件を一つ一つ開く
                                                    foreach ($p_no_array as $array) {

                                                        // 格納された全ての条件が一致する事で、自身のパターンが分かるので、何番目の条件だったかを変数に代入

                                                            if($iii == 0 && $array == $site){$match1 = "ON";}
                                                            if($iii == 1 && $array == $class){$match2 = "ON";}
                                                            if($iii == 2 && $array == $brand){$match3 = "ON";}
                                                            if($iii == 3 && $array == $kinds){$match4 = "ON";}
                                                            //if($iii == 4 && $array == $ref){$match5 = "ON";}

                                                            //if($iii == 3 && $match1 == "ON" && $match2 == "ON" && $match3 == "ON" && $match4 == "ON" && $match5 == "ON"){
                                                            if($iii == 3 && $match1 == "ON" && $match2 == "ON" && $match3 == "ON" && $match4 == "ON"){
                                                                // マッチした条件パターンのナンバー
                                                                    $number = $ii;
                                                            }


                                                        $iii++;
                                                    }
                                                $ii++;

                                            }


                                        /************************************************************************************************************************************************************** */
                                        // 自身の関連IDを取得（関連IDを保有しないIDが対象）（第二条件用）
                                        /************************************************************************************************************************************************************** */

                                                $no_id = "";
                                                // 関連IDを保有しないIDが対象
                                                    if($ids == ""){

                                                        $b = 0;
                                                        foreach($all_no_id_array as $no_id_array){
                                                            // 関連IDを保有しないパターン配列のナンバーと、関連IDを保有しないIDを対象とした第二条件にて取得した関連商品IDの配列の順番が一致した場合（共に同じ順番で紐ついている為、この方法で取得できる）
                                                            if($number == $b){
                                                                foreach($no_id_array as $p_no_id){
                                                                    // 自身と同じIDでなければ代入
                                                                        if($item_id <> $p_no_id){
                                                                            $no_id .= $p_no_id . ",";
                                                                        }
                                                                }
                                                                $no_id = trim($no_id,",");
                                                                //echo $no_id . "(" . $item_id . ")<br>";
                                                                $ids = $no_id;

                                                            }
                                                            $b++;
                                                        }
                                                    }


                                        /************************************************************************************************************************************************************** */
                                        // 関連IDが1つでもあればCSVに書き出し
                                        /************************************************************************************************************************************************************** */
                                                            
                                                    if($ids <> ""){
                                                        $csv_array2 = explode(",",$ids);
                                                        $i3 = 1;
                                                        foreach($csv_array2 as $csv_array3){
                                                            $csv_array = array();
                                                            $csv_array2 = array();
                                            
                                                            array_push($csv_array,$item_id);
                                                            array_push($csv_array,'kanren');
                                                            array_push($csv_array,$csv_array3);
                                                            //array_push($csv_array,'99');
                                                            array_push($csv_array,$i3);

                                                            fputcsv($res,$csv_array);

                                                            $i3++;
                                                        }
                                                    }



                                $i++;
                                }

                        // CSVファイルを閉じる
                            fclose($res);
                        
                        // フラグの作成
                            $dl = "ON";
                            $comment = "<p>！！　CSV作成終了　！！</p>";
                            $error_comment = "";
                        // 元の画面を表示
                            return view($bladename,['dl'=>$dl,'error_comment'=>$error_comment,'comment'=>$comment]);
                            

                }        





}
